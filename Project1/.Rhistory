axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
# Barplot for special requests
p4 <- ggplot(data, aes(x = special.requests)) +
geom_bar(fill = "darkmagenta", color = "black") +
labs(title = "Number of Special Requests", x = "Special Requests", y = "Frequency") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
# Arrange plots in a grid
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
#barplot(table(data$market.segment.type),col="purple",main="Type of the market segment type selected",las=2,cex.names=0.7)
# Barplot of the Number of week nights
p5 <- ggplot(data, aes(x = number.of.week.nights)) +
geom_bar(fill = "coral") +
labs(title = "Number of week nights", x = "Week Nights", y = "Frequency") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))+
ylim(0, 800)
#Barplot of the Number of weekend nights
p6 <- ggplot(data, aes(x = number.of.weekend.nights)) +
geom_bar(fill = "darkmagenta") +
labs(title = "Number of weekend nights", x = "Weekend Nights", y = "Frequency") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))+
ylim(0, 1000)
#barplot(table(data$total.nights),col="lightgreen",main="Number of total nights of stay in the hotel",ylim=c(0,700))
p7 <- ggplot(data, aes(x = number.of.children)) +
geom_bar(fill = "aquamarine4", color = "black") +
labs(title = "Number of Children", x = "Children", y = "Frequency") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))+
ylim(0, 2000)
p8 <- ggplot(data, aes(x = number.of.adults)) +
geom_bar(fill = "skyblue4", color = "black") +
labs(title = "Number of Adults", x = "Adults", y = "Frequency") +
theme_minimal()+  theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))+
ylim(0, 1500)
grid.arrange(p5, p6, p7,p8, nrow = 2,ncol=2)
library(RColorBrewer)
colors <- c( "#C70039","skyblue4")
# Barplot for booking.status
booking_status_table <- table(data$booking.status)
booking_status_df <- as.data.frame(booking_status_table)
booking_status_df$Percentage <- (booking_status_df$Freq / sum(booking_status_df$Freq)) * 100
p9 <- ggplot(booking_status_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_manual(values = colors) +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 5) +
labs(title = "Booking status", x = "Category", y = "Count") +
ylim(0, max(booking_status_df$Freq) * 1.1) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 22),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)
)
repeated_table <- table(data$repeated)
repeated_df <- as.data.frame(repeated_table)
repeated_df$Percentage <- (repeated_df$Freq / sum(repeated_df$Freq)) * 100
# barplot of if a booking is repeated or not
p10 <- ggplot(repeated_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_manual(values = colors) +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 5) +
labs(title = "Repeated Booking", x = "Category", y = "Count") +
ylim(0, max(repeated_df$Freq) * 1.1) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 22),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)
)
parking_table <- table(data$car.parking.space)
parking_df <- as.data.frame(parking_table)
parking_df$Percentage <- (parking_df$Freq / sum(parking_df$Freq)) * 100
p11 <- ggplot(parking_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_manual(values = colors) +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 5) +
labs(title = "Car Parking Space", x = "Category", y = "Count") +
ylim(0, max(parking_df$Freq) * 1.1) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 22),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)
)
grid.arrange(p9,p10,p11, nrow = 2,ncol=2)
#--------------some more plots----------------------------
p13 <- ggplot(data, aes(x = lead.time)) +
geom_histogram(binwidth = 10, fill = "steelblue", color = "black") +
labs(title = "Histogram of Lead Time", x = "Lead Time", y = "Frequency") +
theme_minimal() +
theme(
text = element_text(size = 16),
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
#boxplot of the lead time
#lead time is the # of days between the booking date and the arrival date
p14 <- ggplot(data, aes(y = lead.time)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of Lead Time", y = "Lead Time") +
theme_minimal() +
theme(
text = element_text(size = 16),
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
p15 <- ggplot(data, aes(x = average.price)) +
geom_histogram(binwidth = 10, fill = "aquamarine4", color = "black") +
labs(title = "Histogram of Lead Time", x = "Average Booking Price", y = "Frequency") +
theme_minimal() +
theme(
text = element_text(size = 16),
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
#boxplot of the Average Booking Price
p16 <- ggplot(data, aes(y = average.price)) +
geom_boxplot(fill = "darkseagreen4", color = "black") +
labs(title = "Boxplot of Average Booking Price", y = "Average Booking Price") +
theme_minimal() +
theme(
text = element_text(size = 16),
plot.title = element_text(hjust = 0.5, size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
grid.arrange(p13,p14,p15,p16, nrow = 2,ncol=2)
par(mfrow=c(1,1))
# only the numeric columns
numeric_columns <- select_if(data, is.numeric)
#the correlation matrix
## Calculate pairwise correlations
correlation_matrix <- cor(numeric_columns)
#Create the correlation plot
corrplot(correlation_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex =0.9, cl.cex = 0.9, addCoef.col = "black",
number.cex = 0.9)
#boxplot of average price by market segment type
p17 <- ggplot(data, aes(x = market.segment.type, y = average.price, fill = factor(booking.status.encoded))) +
geom_boxplot() +
labs(title = "Boxplot of Avg Price by Market Segment",
x = "Market Segment Type",
y = "Average Price",
fill = "Booking Status") +
theme_light() + theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18)
)
p18 <- ggplot(data, aes(x = booking.status.encoded, y = lead.time, fill = factor(booking.status.encoded))) +
geom_boxplot() +
labs(title = "Lead Time and Cancellation",
x = "Booking Status",
y = "Lead Time (days)",
fill = "Booking Status") +
scale_fill_manual(values = c("0" = "turquoise", "1" = "purple")) +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
data_summary <- data %>%
group_by(special.requests, booking.status.encoded) %>%
summarise(count = n()) %>%
mutate(freq = count / sum(count))
p19 <- ggplot(data_summary, aes(x = special.requests, y = freq, fill = factor(booking.status.encoded))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("0" = "skyblue3", "1" = "darkmagenta")) +
labs(x = "Number of Special Requests", y = "Percentage", fill = "Booking Status") +
theme_minimal()+  theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
data_summary <- data %>%
group_by(number.of.adults, booking.status.encoded) %>%
summarise(count = n()) %>%
mutate(freq = count / sum(count))
p20<- ggplot(data_summary, aes(x = number.of.adults, y = freq, fill = factor(booking.status.encoded))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("0" = "antiquewhite3", "1" = "aquamarine3")) +
labs(x = "Number of Adults", y = "Percentage", fill = "Booking Status") +
theme_minimal()+theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
grid.arrange(p17,p18,p19,p20, nrow = 2,ncol=2)
#-------------------- CLASSIFICATION ALGORITHMS ---------------------------
#---------------splitting dataset into training and testing data--------------
#The data was Randomly splitted to training (80%) and testing (20%) datasets
#we throw away the booking id , the date and the new column the total nights that we created
data <- data[,-c(1,16, 17, 18)]
n=nrow(data)
#shuffled=data[sample(n),-c(16,17,18)]
#shuffled
#trainSet=shuffled[1:round(0.8 * n),]
#testSet = shuffled[(round(0.8 * n) + 1):n,]
#summary(trainSet)
#summary(testSet)
# 1600 rows
#dim(trainSet)
#400 rows
#dim(testSet)
#-------------------Split to train and test set 80-20---------------------------
num_train <- round(0.8 * n)
ind <- sample(1:n, num_train, replace=FALSE)
trainSet <- data[ind,]
testSet <- data[-ind,]
#----------------------------LASSO ---------------------------------------------
x_train<- model.matrix(booking.status.encoded ~ lead.time + number.of.children + market.segment.type + repeated +
number.of.adults +type.of.meal+ number.of.weekend.nights+ number.of.week.nights + car.parking.space + P.C +P.not.C+
room.type + average.price + special.requests - 1,
data = trainSet)
y_train <- trainSet$booking.status.encoded
# cross-validation to find the optimal lambda
lasso3 <- cv.glmnet(x_train, y_train, family = "binomial")
plot(lasso3)
best_lambda <- lasso3$lambda.min
best_lambda
lasso3$lambda.1se
#alpha=1 is for lasso
m1 <- glmnet(x_train, y_train, family = "binomial", alpha = 1, lambda = best_lambda)
summary(m1)
#the coefficients of the model
#if they have . this means that they were schrunk to zero
#for example number.of.children, market.segment.typeAviation, market.segment.typeComplementary,market.segment.typeCorporate      .
#P.C and room.typeRoom_Type 3  they were schrunk to 0
coef(m1, s = best_lambda)
set.seed(123)
ind <- sample(1:n, num_train, replace = FALSE)
trainSet <- data[ind,]
x_train <- model.matrix(booking.status.encoded ~ . - 1, data = trainSet)
lasso1 <- cv.glmnet(x_train, y_train, family = "binomial")
plot(lasso1)
best_lambda <- lasso1$lambda.min
lasso2 <- glmnet(x_train, y_train, family = "binomial", alpha = 1, lambda = best_lambda)
coef_lasso2 <- as.matrix(coef(lasso2,  best_lambda))
#if coefficient from lasso is zero then put a 1 otherwise put a 0
#so in the count we will have all the variables of the train data with 0 if their coeficient is not 0
# and with 1 if it is zero
count <- ifelse(coef_lasso2 != 0, 0, 1)
# repeat the lasso 100 times in order to see the coeficients of which variables shrunk to 0 the more times
for (i in 2:100) {
ind <- sample(1:n, num_train, replace = FALSE)
trainSet <- data[ind,]
x_train <- model.matrix(booking.status.encoded ~ . - 1, data = trainSet)
y_train <- trainSet$booking.status.encoded
lasso1 <- cv.glmnet(x_train, y_train, family = "binomial")
best_lambda <- lasso1$lambda.min
m1_lasso <- glmnet(x_train, y_train, family = "binomial", alpha = 1, lambda = best_lambda)
coef <- as.matrix(coef(m1_lasso, s = best_lambda))
# update the coefficient each time again with the same logic
coef_with_zero <- ifelse(coef != 0, 0, 1)
count <- count + coef_with_zero
}
#here are the number of times each variable ' s coefficint shrank to 0
count
colnames(count)[colnames(count) == 's1'] <- 'count'
count
#--------------------LOGISTIC REGRESSION ---------------------------------------
#--------------------GLM MODEL ----------------------
#we took all the variables of the trainset, binomial because our response is 0 or 1
m1_glm <- glm(booking.status.encoded~ ., data = trainSet, family = binomial())
summary(m1_glm)
#-----------------FOR TRAIN SET ------------------------------
#relative frequencies of the booking status
table(trainSet$booking.status.encoded)
#predictions for the train data using the glm model
train_pred <- predict(m1_glm, newdata = trainSet, type = "response")
train_pred_class <- ifelse(train_pred > 0.5, 1, 0)
table(train_pred_class)
table(trainSet$booking.status.encoded)
#the confusion matrix
table <- table(Actual = trainSet$booking.status.encoded,Predicted = train_pred_class)
print(table)
confusionMatrix(table)
#True Negative, False Negative,....
TN_train <- table[1,1]
FN_train <- table[2,1]
FP_train <- table[1,2]
TP_train <- table[2,2]
N_train <- sum(table[1,])
P_train <- sum(table[2,])
# Calculating Specificity and Sensitivity for train data
Specificity_train <- FP_train / N_train
Sensitivity_train <- TP_train / P_train
df_train <- data.frame(Specificity = Specificity_train, Sensitivity = Sensitivity_train)
print(kable(df_train))
#the accuracy of the train data
accuracy_train <- sum(diag(table)) / sum(table)
print(paste("Accuracy on training set: ", accuracy_train))
# ROC curve and AUC for Train data
pred_train <- prediction(train_pred, trainSet$booking.status.encoded)
perf_train <- performance(pred_train, "tpr", "fpr")
plot(perf_train, main = "", col = "blue4",cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
auc_train <- performance(pred_train, "auc")
auc_value_train <- auc_train@y.values[[1]]
auc_value_train<- round(auc_value_train, 2)
print(paste("AUC for train data is : ", auc_value_train))
#-----------------FOR TRAIN SET ------------------------------
#relative frequencies of the booking status
table(trainSet$booking.status.encoded)
#predictions for the train data using the glm model
train_pred <- predict(m1_glm, newdata = trainSet, type = "response")
train_pred_class <- ifelse(train_pred > 0.5, 1, 0)
table(train_pred_class)
table(trainSet$booking.status.encoded)
#the confusion matrix
table <- table(Actual = trainSet$booking.status.encoded,Predicted = train_pred_class)
print(table)
confusionMatrix(table)
#True Negative, False Negative,....
TN_train <- table[1,1]
FN_train <- table[2,1]
FP_train <- table[1,2]
TP_train <- table[2,2]
N_train <- sum(table[1,])
P_train <- sum(table[2,])
# Calculating Specificity and Sensitivity for train data
Specificity_train <- FP_train / N_train
Sensitivity_train <- TP_train / P_train
df_train <- data.frame(Specificity = Specificity_train, Sensitivity = Sensitivity_train)
print(kable(df_train))
#the accuracy of the train data
accuracy_train <- sum(diag(table)) / sum(table)
print(paste("Accuracy on training set: ", accuracy_train))
auc_train <- performance(pred_train, "auc")
auc_value_train <- auc_train@y.values[[1]]
auc_value_train<- round(auc_value_train, 2)
print(paste("AUC for train data is : ", auc_value_train))
#-----------------FOR TEST SET ------------------------------
#predictions for the test data using the glm model
test_pred <- predict(m1_glm, newdata = testSet, type = "response")
test_pred_class <- ifelse(test_pred > 0.5, 1, 0)
table(test_pred_class)
table(testSet$booking.status.encoded)
#the confusion matrix with the TP,FN,TN,FP
# 0 | TN    FP, true negatives, false positives
# 1 |  FN    TP,false negatives,true positives
table1 <- table(Actual = testSet$booking.status.encoded,Predicted = test_pred_class)
print(table1)
confusionMatrix(table1)
TN <- table1[1,1]
FN <- table1[2,1]
FP <- table1[1,2]
TP <- table1[2,2]
N <- sum(table1[1,])
N
P <- sum(table1[2,])
P
Specificity <- FP/N
Specificity
Sensitivity <- TP/N
Sensitivity
df <- data.frame(Specificity,Sensitivity)
kable(df)
#the accuracy for the predictions for the test data
accuracy <- sum(diag(table1)) / sum(table1)
print(paste("Accuracy: ", accuracy))
auc <- performance(pred, "auc")
#-----------------FOR TEST SET ------------------------------
#predictions for the test data using the glm model
test_pred <- predict(m1_glm, newdata = testSet, type = "response")
test_pred_class <- ifelse(test_pred > 0.5, 1, 0)
table(test_pred_class)
table(testSet$booking.status.encoded)
#the confusion matrix with the TP,FN,TN,FP
# 0 | TN    FP, true negatives, false positives
# 1 |  FN    TP,false negatives,true positives
table1 <- table(Actual = testSet$booking.status.encoded,Predicted = test_pred_class)
print(table1)
confusionMatrix(table1)
TN <- table1[1,1]
FN <- table1[2,1]
FP <- table1[1,2]
TP <- table1[2,2]
N <- sum(table1[1,])
N
P <- sum(table1[2,])
P
Specificity <- FP/N
Specificity
Sensitivity <- TP/N
Sensitivity
df <- data.frame(Specificity,Sensitivity)
kable(df)
pred <- prediction(test_pred, testSet$booking.status.encoded)
perf <- performance(pred, "tpr", "fpr")
plot(perf, main = "", col = "red4",cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
#the accuracy for the predictions for the test data
accuracy <- sum(diag(table1)) / sum(table1)
print(paste("Accuracy: ", accuracy))
auc <- performance(pred, "auc")
auc_value <- auc@y.values[[1]]
auc_value_test<- round(auc_value, 2)
print(paste("AUC: ", auc_value_test))
# ROC curve and AUC for Train and Test Data
pred_train <- prediction(train_pred, trainSet$booking.status.encoded)
perf_train <- performance(pred_train, "tpr", "fpr")
plot(perf_train, main = "", col = "blue4",cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
pred <- prediction(test_pred, testSet$booking.status.encoded)
perf <- performance(pred, "tpr", "fpr")
plot(perf, main = "", col = "red4",cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# ROC curve and AUC for Train and Test Data
par(mfrow = c(1, 2))
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Reset the plotting area to default
par(mfrow = c(1, 1))
# ROC curve and AUC for Train and Test Data
par(mfrow = c(1, 2))
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 2, cex.main = 2,cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# ROC curve and AUC for Train and Test Data
par(mfrow = c(1, 2))
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 3, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 3, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Reset the plotting area to default
# ROC curve and AUC for Train and Test Data
par(mfrow = c(1, 2))
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# ROC curve and AUC for Train and Test Data
# Set up the plotting area for side-by-side plots and increase font size
par(mfrow = c(1, 2), cex.axis = 2.5, cex.lab = 2.5, cex.main = 2.5)
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# ROC curve and AUC for Train and Test Data
# Set up the plotting area for side-by-side plots and increase font size
par(mfrow = c(1, 2), cex.axis = 1.8, cex.lab = 1.8, cex.main = 1.8)
# Plot for training data
plot(perf_train, main = "ROC Curve - Train Data", col = "blue4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
# Plot for testing data
plot(perf, main = "ROC Curve - Test Data", col = "red4", lwd = 3, cex.axis = 2, cex.lab = 1.5)
abline(0, 1, lty = 2, col = "gray")
